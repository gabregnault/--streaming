%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%% Streaming calculation %%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% This code allows to compute microstreaming by a non-spherically
% oscillating bubble, undergoing any axisymmetric shape modes, oscillating
% at arbitrary frequencies. The theoretical approach has been published in
% 4 parts in physical review, each part corresponding to a specific case of
% modal interaction : 0-M [1], 1-M [2], N-N [3] or N-M [4]. 
%
% [1] Doinikov et.al. Acoustic microstreaming produced by nonspherical oscillations
% of a gas bubble.i. case of modes 0 and m, Phys.Rev.E 100, 033104 (2019)
% [2] Doinikov et.al. Acoustic microstreaming produced by nonspherical oscillations
% of a gas bubble.ii. case of modes 1 and m, Phys.Rev.E 100, 033105 (2019)
% [3] Inserra et.al. Acoustic microstreaming produced by nonspherical 
% oscillations of a gas bubble. iii. case of self-interacting mode n,
% Phys.Rev.E 101, 013111 (2020)
% [4] Inserra et.al. Acoustic microstreaming produced by nonspherical 
% oscillations of a gas bubble. iii. case of modes n and m, Phys.Rev.E 
% 102, 043103 (2020)

%% Physical parameters
clear all
close all
clc

% Indicate here the physical parameters of the fluid surrouding the bubble
rho = 1000; % density
mu = 1*10^(-3); % dynamic viscosity

% Indicate here the bubble size and its modal content: amplitudes, 
% frequency of oscillation and phases (for each frequency if more than one) 
% of all the modes.

R0 = 50e-6; % radius at rest of the bubble
f0 = 30e3; % the excitation frequency
M = [0 2 4]; % the mode orders
F = [f0/2 f0]; % indicate here all the possible oscillation frequencies of 
% the modes
A = [0 5e-6; 10e-6 0; 0 3e-6]; % indicate here the amplitude of every mode,
% for every above indicated frequencies: the first line correspond to the
% modal amplitude of the fist mode M(1), for all the frequencies F.
PHI = [0 0; 0 0; 0 pi/3]; % indicate here thephase of each mode, for every 
% above indicated frequencies: the first line correspond to the phase of 
% the fist mode M(1), for all the frequencies F. The same reference must 
% be used for phases of two modes at the same frequency.

% Define the 2-D cartesian space in which the fluid flow will be computed
L = 40; % Number of points in the mesh (L > 100)
Alpha = 4;% Number of radii in the space
x = linspace(-Alpha*R0,Alpha*R0,L); % X axis
y = linspace(Alpha*R0,-Alpha*R0,L); % Y axis
[X1,Y1] = meshgrid(x,y); % cartesian mesh
[theta,r] = cart2pol(X1,Y1); % associated polar coordinates

%% Global fluid flow calculation
% Determination of all the possible interactions
[INT] = GetTheInteractions(M,F,A,PHI); % INT is a structure whose size correspond to the number of interactions. mode orders, amplitudes, phases and frequencies necessary to compute streaming are stored.

% Calculation of the streaming flow generated by each interactions
U_x_tot = zeros(L,L);
U_y_tot = zeros(L,L);
for ii = 1:length(INT)
    if INT(ii).order1 == 0
        fprintf('Case %d - %d, f = %.0f ...',INT(ii).order1,INT(ii).order2,INT(ii).freq)
        [u_x_euler,u_y_euler,u_x_stokes,u_y_stokes] = streaming_0m_fct(INT(ii).order2,rho,mu,R0,INT(ii).freq,INT(ii).Amp1,INT(ii).Amp2,INT(ii).Phase_shift,x,y,X1,Y1,theta,r,L);
        INT(ii).u_x_euler = u_x_euler;
        INT(ii).u_y_euler = u_y_euler;
        INT(ii).u_x_stokes = u_x_stokes;
        INT(ii).u_y_stokes = u_y_stokes;
        INT(ii).u_x = u_x_euler + u_x_stokes;
        INT(ii).u_y = u_y_euler + u_y_stokes;
        fprintf('\nDone\n \n')
    elseif INT(ii).order1 == 1 && INT(ii).order1 == INT(ii).order2
        fprintf('Case %d - %d, f = %.0f ...',INT(ii).order1,INT(ii).order2,INT(ii).freq)
        [u_x_euler,u_y_euler,u_x_stokes,u_y_stokes] = streaming_11_fct(rho,mu,R0,INT(ii).freq,INT(ii).Amp1,x,y,X1,Y1,theta,r,L);
        INT(ii).u_x_euler = u_x_euler;
        INT(ii).u_y_euler = u_y_euler;
        INT(ii).u_x_stokes = u_x_stokes;
        INT(ii).u_y_stokes = u_y_stokes;
        INT(ii).u_x = u_x_euler + u_x_stokes;
        INT(ii).u_y = u_y_euler + u_y_stokes;
        fprintf('\nDone\n\n')
    elseif INT(ii).order1 == 1;
        fprintf('Case %d - %d, f = %.0f ...',INT(ii).order1,INT(ii).order2,INT(ii).freq)
        [u_x_euler,u_y_euler,u_x_stokes,u_y_stokes] = streaming_1m_fct(INT(ii).order2,rho,mu,R0,INT(ii).freq,INT(ii).Amp1,INT(ii).Amp2,INT(ii).Phase_shift,x,y,X1,Y1,theta,r,L);
        INT(ii).u_x_euler = u_x_euler;
        INT(ii).u_y_euler = u_y_euler;
        INT(ii).u_x_stokes = u_x_stokes;
        INT(ii).u_y_stokes = u_y_stokes;
        INT(ii).u_x = u_x_euler + u_x_stokes;
        INT(ii).u_y = u_y_euler + u_y_stokes;
        fprintf('\nDone\n\n')
    elseif INT(ii).order1 == INT(ii).order2;
        fprintf('Case %d - %d, f = %.0f ...',INT(ii).order1,INT(ii).order2,INT(ii).freq)
        [u_x_euler,u_y_euler,u_x_stokes,u_y_stokes] = streaming_nm_fct(INT(ii).order1,INT(ii).order2,rho,mu,R0,INT(ii).freq,INT(ii).Amp1,INT(ii).Amp2,INT(ii).Phase_shift,x,y,X1,Y1,theta,r,L);
        INT(ii).u_x_euler = u_x_euler/2;
        INT(ii).u_y_euler = u_y_euler/2;
        INT(ii).u_x_stokes = u_x_stokes/2;
        INT(ii).u_y_stokes = u_y_stokes/2;
        INT(ii).u_x = (u_x_euler + u_x_stokes)/2;
        INT(ii).u_y = (u_y_euler + u_y_stokes)/2;
        fprintf('\nDone\n\n')
    else
        fprintf('Case %d - %d, f = %.0f ...',INT(ii).order1,INT(ii).order2,INT(ii).freq)
        [u_x_euler,u_y_euler,u_x_stokes,u_y_stokes] = streaming_nm_fct(max([INT(ii).order1 INT(ii).order2]),min([INT(ii).order1 INT(ii).order2]),rho,mu,R0,INT(ii).freq,INT(ii).Amp1,INT(ii).Amp2,INT(ii).Phase_shift,x,y,X1,Y1,theta,r,L);
        INT(ii).u_x_euler = u_x_euler;
        INT(ii).u_y_euler = u_y_euler;
        INT(ii).u_x_stokes = u_x_stokes;
        INT(ii).u_y_stokes = u_y_stokes;
        INT(ii).u_x = u_x_euler + u_x_stokes;
        INT(ii).u_y = u_y_euler + u_y_stokes;
        fprintf('\nDone\n\n')
    end 
    U_x_tot = U_x_tot + INT(ii).u_x;
    U_y_tot = U_y_tot + INT(ii).u_y;
    clearvars u_x_euler u_y_euler u_x_stokes u_y_stokes;
end

%% Plot
col = struct('bleu', [34/255,66/255,124/255]);
Layout(10,10)
figure(1)
hold on
h1 = streamslice(X1/R0,Y1/R0,U_x_tot,U_y_tot,3,'nearest');
% h1 = streamslice(X1/R0,Y1/R0,INT(3).u_x,INT(3).u_y,3,'nearest');
set(h1,'Color',[0 0 0])
circles(0,0,1,'color',col.bleu);
hold off
axis square
set(gca,'color','w')
set(gcf,'color','w')
set(gca,'box','off')
axis equal
box on
xlim([-Alpha Alpha])
ylim([-Alpha Alpha])
xticks([-4 -2 0 2 4])
yticks([-4 -2 0 2 4])
xlabel('$r/R_0$')
ylabel('$r/R_0$')